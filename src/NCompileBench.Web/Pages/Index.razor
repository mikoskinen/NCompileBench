@page "/"
@using NCompileBench.Web.Infastructure
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.Extensions.Configuration
@inject IJSRuntime JSRuntime
@implements IDisposable

<h2>Current Top Results</h2>
@if (_isBusy)
{
    <div class="spinner-border text-warning" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else if (!string.IsNullOrWhiteSpace(_status))
{
    <p class="alert alert-warning">@_status</p>
}
else
{
    <table class="table table-striped" id="resultTable">
        <thead>
        <tr>
            <th>System</th>
            <th>CPU</th>
            <th>CPUs</th>
            <th>Cores</th>
            <th>MT Score</th>
            <th>ST Score</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var result in _results)
        {
            <tr>
                <td>@result.System</td>
                <td>@result.CpuName</td>
                <td>@result.CpuCount</td>
                <td>@result.CoreCount / @result.LogicalCoreCount</td>
                <td>@result.Score</td>
                <td>@result.SingleCoreScore</td>
            </tr>
        }

        </tbody>
    </table>
}


@code
{
    [Inject]
    private ResultClient Client { get; set; }

    [Inject]
    private IWebAssemblyHostEnvironment HostEnvironment { get; set; }

    [Inject]
    private IConfiguration Configuration { get; set; }
    
    private readonly List<ResultSummary> _results = new();
    private bool _isBusy { get; set; }
    private string _status = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        _status = string.Empty;
        
        try
        {
            var resultSummaries = await Client.GetTopResultsAsync();
            _results.AddRange(resultSummaries);

            await JSRuntime.InvokeAsync<object>("DataTablesAdd", "#resultTable");
        }
        catch (Exception e)
        {
            _status = $"Failed to load top scores. Environment: {HostEnvironment.Environment}. Backend url: {Configuration["BackendUrl"]}. Client backend url: {Client.BaseUrl}";
        }
        
        _isBusy = false;
    }

    public void Dispose()
    {
        JSRuntime.InvokeAsync<object>("DataTablesRemove", "#resultTable");
    }
}